* tmux
** .tmux.conf
   #+BEGIN_SRC conf
     # reload this file
     bind C-r source-file ~/.tmux.conf \; display-message "Reload Config!!"
     # Prefix
     set-option -g prefix C-t
     unbind-key C-b
     bind-key t send-prefix
     # # for terminal-notifier
     # set-option -g default-command "reattach-to-user-namespace -l zsh"

     set-window-option -g mode-keys emacs
     setw -g mode-keys emacs

     bind 0 kill-pane
     bind 0 kill-pane
     bind 1 break-pane
     bind 2 split-window -v
     bind 3 split-window -h
     bind o select-pane -t :.+
     bind k kill-window
     bind C-c new-window
     bind C-n next-window
     bind C-p previous-window
     bind C-t last-window

     # # window selection
     # bind ! select-window -t :1

     # move pane
     # Shift + 上下左右でペインを移動できるようにする。(＜Prefix＞不要)
     # 行頭に"bind -n"をつけるとPrefixが不要になる。
     bind -n S-left select-pane -L
     bind -n S-down select-pane -D
     bind -n S-up select-pane -U
     bind -n S-right select-pane -R
     # bind C-; select-pane -t :.+

     # show copy mode key binds
     bind / list-keys -t emacs-copy

     # # mouse wheel(in copy mode)
     # setw -g mode-mouse on

     # # Allow mouse to select which pane to use
     # set -g mouse-select-pane on

     # # Allow xterm titles in terminal window, terminal scrolling with scrollbar, and setting overrides of C-Up, C-Down, C-Left, C-Right
     # set -g terminal-overrides "xterm*:XT:smcup@:rmcup@:kUP5=\eOA:kDN5=\eOB:kLFT5=\eOD:kRIT5=\eOC"

     # # Scroll History
     # set -g history-limit 30000

     # # Set ability to capture on start and restore on exit window data when running an application
     # setw -g alternate-screen on

     # # Lower escape timing from 500ms to 50ms for quicker response to scroll-buffer access.
     # set -s escape-time 50

     # pane movement
     # http://d.hatena.ne.jp/kozo2/20111202/1322827858
     # アクティブpaneを指定したwindowに移動する
     bind-key j command-prompt -p "send pane to:"  "join-pane -t '%%'"
     # 指定したpaneをアクティブwindowに連れてくる
     bind-key b command-prompt -p "join pane from:"  "join-pane -s '%%'"


     # status line
     # http://qiita.com/nojima/items/9bc576c922da3604a72b
     # カレントウィンドウの window-status のフォーマットを指定する
     set-window-option -g window-status-current-format "#[fg=colour255,bg=colour27,bold] #I: #W #[default]"
     # # status line を更新する間隔を 1 秒にする
     # set-option -g status-interval 1
     # # window-status を中央揃えで配置する
     # set-option -g status-justify "centre"
     # # status line の背景色を指定する。
     # set-option -g status-bg "colour238"
     # # status line の文字色を指定する。
     # set-option -g status-fg "colour255"
     # # status-left の最大の長さを指定する。
     # set-option -g status-left-length 20
     # # status-left のフォーマットを指定する。
     # set-option -g status-left "#[fg=colour255,bg=colour241]Session: #S #[default]"
     # # status-right の最大の長さを指定する。
     # set-option -g status-right-length 60
     # # status-right のフォーマットを指定する。
     # set-option -g status-right "#[fg=colour255,bg=colour241] #h | LA: #(cut -d' ' -f-3 /proc/loadavg) | %m/%d %H:%M:%S#[default]"
     # # window-status のフォーマットを指定する。
     # set-window-option -g window-status-format " #I: #W "

     # Character pair        Replaced with
     # #(shell command)      コマンドの出力の最初の行
     # #[attributes] 色や属性の変更
     # #H    ローカルホストのホスト名
     # #h    ローカルホストのドメイン名を除いたホスト名
     # #F    カレントウィンドウのフラグ
     # #I    カレントウィンドウのインデクス
     # #D    カレントペインの識別子
     # #P    カレントペインのインデクス
     # #S    セッション名
     # #T    カレントペインのタイトル
     # #W    カレントウィンドウの名前
     # ##    #
     # %Y-%m-%d %H:%M:%S などの strftime

     # style
     # #[fg=colour255,bold] のように色や太さをカンマ区切り
     # 戻すのは#[default]
     # bright (or bold)
     # dim
     # underscore
     # blink
     # reverse
     # hidden
     # italics

     # color
     # https://raw.githubusercontent.com/erikw/tmux-powerline/master/color_palette.sh
     # #!/usr/bin/env bash
     # # Print tmux color palette.
     # # Idea from http://superuser.com/questions/285381/how-does-the-tmux-color-palette-work

     # for i in $(seq 0 4 255); do
     #       for j in $(seq $i $(expr $i + 3)); do
     #               for k in $(seq 1 $(expr 3 - ${#j})); do
     #                       printf " "
     #               done
     #               printf "\x1b[38;5;${j}mcolour${j}"
     #               [[ $(expr $j % 4) != 3 ]] && printf "    "
     #       done
     #       printf "\n"
     # done

     # 自動起動とか
     # http://qiita.com/cuzic/items/e4b0560fb90c6bb89125
     # http://rksz.hateblo.jp/entry/2012/11/18_tmux_pane_command

     # prefix Enter で、現在のペインをメインのペインに変更した上で、
     # main-vertical レイアウトにする。
     # rotate-window を使っているのがポイント
     bind Enter run-shell "sh -c \"yes rotate-window -U \\; | head -n $(tmux display-message -p '#P' ) | xargs tmux ; tmux select-pane -t 0 \\; select-layout main-vertical \""

     # # prefix Insert で main-vertical レイアウトのまま、新たなペインを生成
     # bind IC run-shell "sh -c \"tmux split-window -v -t 0 \\\"$( tmux list-panes -F '#{pane_active} #{pane_start_command}' | egrep ^1 | sed 's/^1 //' )\\\" \\; select-layout main-vertical \""

   #+END_SRC
