* JavaScript
** map/reduce for DOM
*** [[http://jcla1.com/blog/javascript-mapreduce/][Javascript and MapReduce - Joseph Adams]]
    #+BEGIN_SRC js
      Array.prototype.slice.call(document.getElementsBy*****(selector))
          .reduce(function(prev, cur, i, element){
              return prev + cur.textContent;
          }, "");
    #+END_SRC
*** [[http://blog.sushi.money/entry/2017/04/19/114028][querySelectorAllしてmapしたいとき...すると短い - hitode909の日記]]
    #+BEGIN_SRC js
      // in devtool
      $$('a').map(a => a.href)
      // other env
      Array.from(document.querySelectorAll('a'), a => a.href)
    #+END_SRC
** map/reduce for Object
   [[http://stackoverflow.com/a/15748853/514411][arrays - Javascript reduce() on Object - Stack Overflow]]
   #+BEGIN_SRC js
     var o = {
       key1: 'value1',
       key2: 'value2',
       key3: 'value3'
     };
     // reduce
     Object.keys(o).reduce(function (previous, key) {
       return previous + key + '=' + o[key] + '&';
     }, '');
     // => "key1=value1&key2=value2&key3=value3&"

     // map
     // element means `o`s key  (`keys(o)`s element)
     Object.keys(o).map(function (element, index, array) {
       return element + '=' + o[element];
     }).join('&');
     // => "key1=value1&key2=value2&key3=value3"
   #+END_SRC
** date
   #+BEGIN_SRC js
     // https://www.w3schools.com/jsref/jsref_obj_date.asp
     var d = new Date();
     d.getTime() // Returns UNIX Time?
     d.getUTCFullYear() // Returns the year, according to universal time
     d.getUTCMonth() // Returns the month, according to universal time (from 0-11)
     d.getUTCDate() // Returns the day of the month, according to universal time (from 1-31)
     d.getUTCDay() // Returns the day of the week, according to universal time (from 0-6)
     d.getUTCHours() // Returns the hour, according to universal time (from 0-23)
     d.getUTCMinutes() // Returns the minutes, according to universal time (from 0-59)
     d.getUTCSeconds() // Returns the seconds, according to universal time (from 0-59)
     d.getUTCMilliseconds() // Returns the milliseconds, according to universal time (from 0-999)
     d.toISOString(); // Returns the date as a string, using the ISO standard (like '2017-08-16T05:43:03.416Z')
     var zerofillMonth = ('00' + (d.getUTCMonth() + 1)).slice(-2);

     var ymdhms = function(d){
       return d.getUTCFullYear() + '/'
         + d.getUTCMonth() + '/'
         + d.getUTCDate() + ' '
         + d.getUTCHours() + ':'
         + d.getUTCMinutes() + ':'
         + d.getUTCSeconds();
     };
   #+END_SRC
** on enter keyup for IME
   [[https://garafu.blogspot.jp/2015/09/javascript-ime-enter-event.html][JavaScript における 日本語入力 確定 (Enter) イベント - galife]]
   enter key doesn't fire keypress event if IME is ON and stil inputting (not confirmed).
   #+BEGIN_SRC html
     <!-- in Vue -->
     <input v-on:keyup.enter="wrong" v-on:keypress.enter="correct"/>
   #+END_SRC
** electron
*** copy and paste
    - [[https://pracucci.com/atom-electron-enable-copy-and-paste.html][Electron - Enable copy and paste]]
    - [[https://github.com/electron/electron/blob/master/docs/api/menu.md][electron/menu.md at master · electron/electron]]
**** create menul.js
     #+BEGIN_SRC js
       const {app, Menu} = require('electron');

       var init = function(){
           var template = [
               {
                   label: "Application",
                   submenu: [
                       { label: "About Application", selector: "orderFrontStandardAboutPanel:" },
                       { type: "separator" },
                       { label: "Quit", accelerator: "Command+Q", click: function() { app.quit(); }}
                   ]},
               {
                   label: "Edit",
                   submenu: [
                       { label: "Undo", accelerator: "CmdOrCtrl+Z", selector: "undo:" },
                       { label: "Redo", accelerator: "Shift+CmdOrCtrl+Z", selector: "redo:" },
                       { type: "separator" },
                       { label: "Cut", accelerator: "CmdOrCtrl+X", selector: "cut:" },
                       { label: "Copy", accelerator: "CmdOrCtrl+C", selector: "copy:" },
                       { label: "Paste", accelerator: "CmdOrCtrl+V", selector: "paste:" },
                       { label: "Select All", accelerator: "CmdOrCtrl+A", selector: "selectAll:" }
                   ]}
           ];

           Menu.setApplicationMenu(Menu.buildFromTemplate(template));
       };

       module.exports = {
           init: init
       };
     #+END_SRC
**** load and call Menu.init() in index.js
     #+BEGIN_SRC js
       import Menu from './menu';

       function createWindow(){
           /**
            ,* Initial window options
            ,*/
           mainWindow = new BrowserWindow({
               height: 600,
               width: 800
           });

           mainWindow.loadURL(winURL);

           mainWindow.on('closed', () => {
               mainWindow = null;
           });

           Menu.init();

           // eslint-disable-next-line no-console
           console.log('mainWindow opened');
       }
     #+END_SRC
** add semantic-ui with webpack
   - install jquery and semantic-ui(with instruction and gulp build)
   - update configuration below
   #+BEGIN_SRC diff
     --- a/build/webpack.base.conf.js
     +++ b/build/webpack.base.conf.js
     @@ -1,5 +1,6 @@
      var path = require('path')
      var utils = require('./utils')
     +var webpack = require('webpack')
      var config = require('../config')
      var vueLoaderConfig = require('./vue-loader.conf')

     @@ -25,6 +26,13 @@ module.exports = {
            '@': resolve('src')
          }
        },
     +  plugins: [
     +    new webpack.ProvidePlugin({
     +      $: 'jquery',
     +      jQuery: 'jquery',
     +      'window.jQuery': 'jquery'
     +    })
     +  ],
        module: {
          rules: [
            {
   #+END_SRC
** promise
   #+BEGIN_SRC js
     new Promise((resolve, reject) => {
       // something async
       resolve('result')
     })
   #+END_SRC
** uniquify
   #+BEGIN_SRC js
     var arr = [1,2,3,2,1];
     var unique = arr.filter((v, i, a) => a.indexOf(v) === i);
   #+END_SRC
** cursor management
   #+BEGIN_SRC js2
     let region = null

     // http://blog.vishalon.net/javascript-getting-and-setting-caret-position-in-textarea
     function getCaretPosition (ctrl) {
       // IE < 9 Support
       if (document.selection) {
         ctrl.focus()
         var range = document.selection.createRange()
         var rangelen = range.text.length
         range.moveStart('character', -ctrl.value.length)
         var start = range.text.length - rangelen
         return {
           target: ctrl,
           start: start,
           end: start + rangelen
         }
       } else if (ctrl.selectionStart || ctrl.selectionStart === '0') {
         // IE >=9 and other browsers
         return {
           target: ctrl,
           start: ctrl.selectionStart,
           end: ctrl.selectionEnd
         }
       } else {
         return {
           target: ctrl,
           start: 0,
           end: 0
         }
       }
     }

     function setCaretPosition (ctrl, start, end) {
       // IE >= 9 and other browsers
       if (ctrl.setSelectionRange) {
         ctrl.focus()
         ctrl.setSelectionRange(start, end)
       } else if (ctrl.createTextRange) {
         // IE < 9
         var range = ctrl.createTextRange()
         range.collapse(true)
         range.moveEnd('character', end)
         range.moveStart('character', start)
         range.select()
       }
     }

     var vue = {
       beforeUpdate () {
         if (region !== null) {
           console.log('before save update', [region.start, region.end])
           region = getCaretPosition(region.target)
           console.log('save before update', [region.start, region.end])
         }
       },

       updated () {
         console.log('updated')
         // ここで一瞬更新前のnodeの状態になるので、カーソル位置が入力前の位置になってしまうのではないか？
         if (region == null || region.start !== region.end) {
           return
         }
         console.log('set to region', [region.start, region.end])
         setCaretPosition(region.target, region.start, region.end)
       },

       methods: {
         update: _.debounce(function ($ev) {
           if ($ev) {
             region = getCaretPosition($ev.target)
             console.log('region updated in this.update()', region)
           }
           if (region) {
             console.log('now current region', [region.start, region.end])
           }
         }, 800),
       }
     }
   #+END_SRC
** store/restore options
   #+BEGIN_SRC js
     var optionStore = function(key, formname, optionname){
       var target = document[formname][optionname].options;
       var aDom = Array.prototype.slice.call(target);
       var selection = aDom.map(function(e){
         return {value: e.value, title: e.title}
       });
       var json = JSON.stringify(selection);
       localStorage.setItem(key, json);
     };
     optionStore('storekey', 'form-name', 'option-field-name');

     // view
     JSON.parse(localStorage.getItem('storekey'))


     var optionRestore = function(key, formname, optionname){
       var options = JSON.parse(localStorage.getItem(key));
       var target = document[formname][optionname].options;
       options.map(function(e){
         var a = document.createElement('option');
         a.value = e.value;
         a.title = e.title;
         a.innerText = e.title;
         target.add(a, target.length - 1);
       });
       // localStorage.setItem(key, []);
     };
     optionRestore('storekey', 'form-name', 'option-field-name');
   #+END_SRC
** js nocache loader
   [[https://stackoverflow.com/a/14897894/514411][jquery - Load external <script> without cache using Javascript - Stack Overflow]]
   #+BEGIN_SRC js2
     'use strict';
     const loader = function(src){
       var scr = document.createElement("script");
       scr.src = src + "?ts=" + new Date().getTime();
       document.getElementsByTagName("head")[0].appendChild(scr);
     };
     [
       './script.js'
     ].map(loader);
   #+END_SRC
** js sequencial loader
   [[https://stackoverflow.com/questions/16230886/trying-to-fire-the-onload-event-on-script-tag][javascript - Trying to fire the onload event on script tag - Stack Overflow]]
   #+BEGIN_SRC js2
     'use strict';
     const loader = function(queue, cb){
       var item = queue.shift();
       var script = document.createElement("script");
       document.getElementsByTagName("head")[0].appendChild(script);
       // console.log(src + ' start ' + new Date().getTime());
       script.onload = function(){
         // console.log(src + ' loaded ' + new Date().getTime());
         if(queue.length){
           return loader(queue, cb);
         }
         // console.log('all loaded');
         return cb();
       };
       script.src = item.src + (item.useCache ? '' : "?ts=" + new Date().getTime());
     };
     const parallel = [
       {src: '//cdn.jsdelivr.net/npm/vue@2/dist/vue.min.js', useCache: true},
       {src: '//cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js', useCache: true},
       {src: '//cdn.jsdelivr.net/npm/semantic-ui@2/dist/semantic.min.js', useCache: true}
     ];
     var finish = parallel.length;
     const queue = [
       {src: './first.js', useCache: false},
       {src: './second.js', useCache: false},
     ];

     const loadQueue = function(){
       finish -= 1;
       if(finish === 0){
         loader(queue, function(){});
       }
     };
     parallel.map(function(e, i, a){
       loader([e], loadQueue);
     });
   #+END_SRC
** DOM add/remove class
   #+BEGIN_SRC js
     document.getElementById('app').classList.remove('loading');
   #+END_SRC
** detect event
*** te
    #+BEGIN_SRC js
      $._data($("#click1").get(0), "events");
    #+END_SRC
** prevent page move/unload
   - [[https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload][WindowEventHandlers.onbeforeunload - Web APIs | MDN]]
   - [[https://stackoverflow.com/questions/11844256/alert-for-unsaved-changes-in-form][javascript - Alert for unsaved changes in form - Stack Overflow]]
   #+BEGIN_SRC js
     var modified = false;
     window.addEventListener('beforeunload', function (e) {
       if(!modified){
         return;
       }
       var message = "You have unsaved changes on this page. Do you want to leave this page and discard your changes or stay on this page?";
       e.returnValue = message;
       return message;
     });
     document.querySelectorAll('input').forEach(function(input) {
       input.addEventListener('change', function (e) {
         window.modified = true;
       });
     });
   #+END_SRC
